{
  "version": 3,
  "sources": ["../../../src/rhf/LmAutocompleteRhf.tsx"],
  "sourcesContent": ["import { Controller, FieldValues } from 'react-hook-form'\nimport { LmRhfProps } from './lmRhfProps'\nimport { LmAutocomplete, LmAutocompleteProps } from '../LmAutocomplete'\n\nexport type LmAutocompleteRhfProps<T extends FieldValues> = LmRhfProps<T> &\n  LmAutocompleteProps & {\n    matchId?: boolean\n  }\n\nexport function LmAutocompleteRhf<T extends FieldValues = FieldValues>({\n  name,\n  rules,\n  control,\n  defaultValue,\n  matchId,\n  options,\n  multiple,\n  ...inputProps\n}: LmAutocompleteRhfProps<T>) {\n  return (\n    <Controller\n      name={name}\n      rules={rules}\n      control={control}\n      defaultValue={defaultValue}\n      render={({ field: { onChange, value }, fieldState: { error } }) => {\n        let currentValue = multiple ? value || [] : value || null\n        if (matchId) {\n          // @ts-ignore\n          currentValue = multiple\n            ? (value || []).map((i: any) => options.find((j) => (j.value || j) === i))\n            : options.find((i) => (i.value || i) === value) || null\n        }\n\n        return (\n          <LmAutocomplete\n            {...inputProps}\n            value={currentValue}\n            multiple={multiple}\n            options={options}\n            error={!!error}\n            onChange={(v) => {\n              let changedVal = v\n              if (matchId) {\n                // @ts-ignore\n                changedVal = Array.isArray(v) ? v.map((i: any) => i?.value || i) : v?.value || v\n              }\n              onChange(changedVal)\n              if (typeof inputProps.onChange === 'function') {\n                inputProps.onChange(v)\n              }\n            }}\n            helperText={error ? error.message : inputProps.helperText}\n          />\n        )\n      }}\n    />\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCU;AAnCV,6BAAwC;AAExC,4BAAoD;AAO7C,SAAS,kBAAuD;AAAA,EACrE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAA8B;AAC5B,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,CAAC,EAAE,OAAO,EAAE,UAAU,MAAM,GAAG,YAAY,EAAE,MAAM,EAAE,MAAM;AACjE,YAAI,eAAe,WAAW,SAAS,CAAC,IAAI,SAAS;AACrD,YAAI,SAAS;AAEX,yBAAe,YACV,SAAS,CAAC,GAAG,IAAI,CAAC,MAAW,QAAQ,KAAK,CAAC,OAAO,EAAE,SAAS,OAAO,CAAC,CAAC,IACvE,QAAQ,KAAK,CAAC,OAAO,EAAE,SAAS,OAAO,KAAK,KAAK;AAAA,QACvD;AAEA,eACE;AAAA,UAAC;AAAA;AAAA,YACE,GAAG;AAAA,YACJ,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA,OAAO,CAAC,CAAC;AAAA,YACT,UAAU,CAAC,MAAM;AACf,kBAAI,aAAa;AACjB,kBAAI,SAAS;AAEX,6BAAa,MAAM,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,OAAW,uBAAG,UAAS,CAAC,KAAI,uBAAG,UAAS;AAAA,cACjF;AACA,uBAAS,UAAU;AACnB,kBAAI,OAAO,WAAW,aAAa,YAAY;AAC7C,2BAAW,SAAS,CAAC;AAAA,cACvB;AAAA,YACF;AAAA,YACA,YAAY,QAAQ,MAAM,UAAU,WAAW;AAAA;AAAA,QACjD;AAAA,MAEJ;AAAA;AAAA,EACF;AAEJ;",
  "names": []
}
