{
  "version": 3,
  "sources": ["../../src/LmSelect.tsx"],
  "sourcesContent": ["import { Select, SelectProps, ThemeProps, YStack } from 'tamagui'\nimport { LinearGradient } from '@tamagui/linear-gradient'\nimport { colormap, ThemeColors } from '@tamagui-extras/core'\nimport { CaretDown, CaretUp, Check } from 'tamagui-phosphor-icons'\nimport { useId, useState } from 'react'\nimport { LmFormFieldContainer } from './LmFormFieldContainer'\nimport { LmFormContainerBaseTypes } from './formContainerTypes'\n\ntype GetAltThemeNames<S> = (S extends `${string}_${infer Alt}` ? GetAltThemeNames<Alt> : S) | S\n\nexport type LmSelectProps = SelectProps &\n  LmFormContainerBaseTypes & {\n    value?: string\n    options: { label: string; value: string | number }[]\n    colorVariant?: ThemeColors\n    themeName?: ThemeProps['name']\n    width?: number | string\n    placeholder?: string\n    dropDownLabel?: string // above the items list\n    fullWidth?: boolean\n  }\n\nexport function LmSelect({\n  value,\n  colorVariant,\n  themeName,\n  options = [],\n  width = 180,\n  placeholder = '',\n  dropDownLabel,\n  required,\n  error,\n  helperText,\n  helperTextProps,\n  label,\n  labelInline,\n  labelProps,\n  fullWidth,\n  defaultValue,\n  onValueChange,\n  ...rest\n}: LmSelectProps) {\n  const [selectVal, setSelectVal] = useState<string>(value ?? defaultValue ?? '')\n  const id = useId()\n  rest.size = rest.size || '$3'\n\n  return (\n    <LmFormFieldContainer\n      id={id}\n      theme={colorVariant ? (colormap[colorVariant] as any) : themeName || undefined}\n      error={error}\n      required={required}\n      labelProps={labelProps}\n      label={label}\n      size={rest.size}\n      fullWidth={fullWidth}\n      labelInline={labelInline}\n      helperText={helperText}\n      helperTextProps={helperTextProps}\n    >\n      <Select\n        id={id}\n        {...rest}\n        value={selectVal}\n        onValueChange={(val) => {\n          setSelectVal(val)\n          if (typeof onValueChange === 'function') {\n            onValueChange(val)\n          }\n        }}\n      >\n        <Select.Trigger\n          width={fullWidth ? '100%' : width}\n          iconAfter={<CaretDown />}\n          paddingVertical={0}\n          minHeight={rest.size}\n        >\n          <Select.Value placeholder={placeholder} paddingVertical={0} />\n        </Select.Trigger>\n        {/*@ts-ignore*/}\n        <Select.Adapt when=\"sm\">\n          <Select.Sheet modal dismissOnSnapToBottom>\n            <Select.Sheet.Frame>\n              <Select.Sheet.ScrollView>\n                <Select.Adapt.Contents />\n              </Select.Sheet.ScrollView>\n            </Select.Sheet.Frame>\n            <Select.Sheet.Overlay />\n          </Select.Sheet>\n        </Select.Adapt>\n\n        <Select.Content zIndex={200000}>\n          <Select.ScrollUpButton\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            position=\"relative\"\n            width=\"100%\"\n            height=\"$3\"\n          >\n            <YStack zIndex={10}>\n              <CaretUp size={20} />\n            </YStack>\n            <LinearGradient\n              start={[0, 0]}\n              end={[0, 1]}\n              fullscreen\n              colors={['$background', '$backgroundTransparent']}\n              borderRadius=\"$4\"\n            />\n          </Select.ScrollUpButton>\n\n          <Select.Viewport>\n            <Select.Group>\n              {dropDownLabel && <Select.Label>{dropDownLabel}</Select.Label>}\n              {options.map((item, i) => (\n                <Select.Item index={i} key={item.value} value={`${item.value}`}>\n                  <Select.ItemText>{item.label}</Select.ItemText>\n                  <Select.ItemIndicator marginLeft=\"auto\">\n                    <Check size={16} />\n                  </Select.ItemIndicator>\n                </Select.Item>\n              ))}\n            </Select.Group>\n          </Select.Viewport>\n\n          <Select.ScrollDownButton\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            position=\"relative\"\n            width=\"100%\"\n            height=\"$3\"\n          >\n            <YStack zIndex={10}>\n              <CaretDown size={20} />\n            </YStack>\n            <LinearGradient\n              start={[0, 0]}\n              end={[0, 1]}\n              fullscreen\n              colors={['$backgroundTransparent', '$background']}\n              borderRadius=\"$4\"\n            />\n          </Select.ScrollDownButton>\n        </Select.Content>\n      </Select>\n    </LmFormFieldContainer>\n  )\n}\n"],
  "mappings": "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",
  "names": []
}
