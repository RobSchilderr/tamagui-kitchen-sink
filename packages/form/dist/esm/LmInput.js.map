{
  "version": 3,
  "sources": ["../../src/LmInput.tsx"],
  "sourcesContent": ["import { Input, InputProps, Stack, TextArea, ThemeableStackProps } from 'tamagui'\nimport { useId, useState } from 'react'\nimport { LmFormFieldContainer } from './LmFormFieldContainer'\nimport { LmFormContainerBaseTypes } from './formContainerTypes'\nimport { Eye, EyeSlash, IconProps } from 'tamagui-phosphor-icons'\nimport { ColorValue, Pressable } from 'react-native'\n\nexport type LmInputProps = InputProps &\n  LmFormContainerBaseTypes & {\n    containerProps?: ThemeableStackProps\n    multiline?: boolean\n    isPassword?: boolean\n    fullWidth?: boolean\n    passwordIconProps?: IconProps\n  }\n\nexport function LmInput({\n  required,\n  error,\n  helperText,\n  helperTextProps,\n  label,\n  labelProps,\n  labelInline,\n  multiline,\n  containerProps,\n  isPassword,\n  passwordIconProps,\n  fullWidth,\n  ...rest\n}: LmInputProps) {\n  const genId = useId()\n  const [show, setShow] = useState<boolean>(false)\n  const id = rest.id || genId\n  const styleProps = {\n    ...rest,\n  }\n  if (error) {\n    styleProps.theme = 'red'\n    styleProps.borderColor = error ? '$red8' : undefined\n  }\n  if (fullWidth) {\n    styleProps.minWidth = '100%'\n  }\n\n  let secureTextEntry = !!(rest.secureTextEntry || isPassword)\n\n  return (\n    <LmFormFieldContainer\n      id={id}\n      error={error}\n      required={required}\n      labelProps={labelProps}\n      label={label}\n      fullWidth={fullWidth}\n      size={rest.size}\n      labelInline={labelInline}\n      helperText={helperText}\n      helperTextProps={helperTextProps}\n      {...containerProps}\n    >\n      {multiline ? (\n        <TextArea {...styleProps} placeholderTextColor={rest.placeholderTextColor as ColorValue} />\n      ) : secureTextEntry ? (\n        <Stack position={'relative'} width={fullWidth ? '100%' : styleProps?.width}>\n          <Input\n            {...styleProps}\n            secureTextEntry={!show}\n            autoCapitalize=\"none\"\n            placeholderTextColor={rest.placeholderTextColor as InputProps['placeholderTextColor']}\n          />\n          <Pressable\n            style={{\n              position: 'absolute',\n              top: '50%',\n              transform: [{ translateY: -0.5 * 20 }],\n              height: 20,\n              right: 15,\n            }}\n            onPress={() => {\n              setShow((state) => !state)\n            }}\n          >\n            {show ? <EyeSlash {...passwordIconProps} /> : <Eye {...passwordIconProps} />}\n          </Pressable>\n        </Stack>\n      ) : (\n        <Input {...styleProps} autoCapitalize=\"none\" />\n      )}\n    </LmFormFieldContainer>\n  )\n}\n"],
  "mappings": "AA8DQ,cAEA,YAFA;AA9DR,SAAS,OAAmB,OAAO,gBAAqC;AACxE,SAAS,OAAO,gBAAgB;AAChC,SAAS,4BAA4B;AAErC,SAAS,KAAK,gBAA2B;AACzC,SAAqB,iBAAiB;AAW/B,SAAS,QAAQ;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAiB;AACf,QAAM,QAAQ,MAAM;AACpB,QAAM,CAAC,MAAM,OAAO,IAAI,SAAkB,KAAK;AAC/C,QAAM,KAAK,KAAK,MAAM;AACtB,QAAM,aAAa;AAAA,IACjB,GAAG;AAAA,EACL;AACA,MAAI,OAAO;AACT,eAAW,QAAQ;AACnB,eAAW,cAAc,QAAQ,UAAU;AAAA,EAC7C;AACA,MAAI,WAAW;AACb,eAAW,WAAW;AAAA,EACxB;AAEA,MAAI,kBAAkB,CAAC,EAAE,KAAK,mBAAmB;AAEjD,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,KAAK;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACC,GAAG;AAAA,MAEH,sBACC,oBAAC,YAAU,GAAG,YAAY,sBAAsB,KAAK,sBAAoC,IACvF,kBACF,qBAAC,SAAM,UAAU,YAAY,OAAO,YAAY,SAAS,yCAAY,OACnE;AAAA;AAAA,UAAC;AAAA;AAAA,YACE,GAAG;AAAA,YACJ,iBAAiB,CAAC;AAAA,YAClB,gBAAe;AAAA,YACf,sBAAsB,KAAK;AAAA;AAAA,QAC7B;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACC,OAAO;AAAA,cACL,UAAU;AAAA,cACV,KAAK;AAAA,cACL,WAAW,CAAC,EAAE,YAAY,OAAO,GAAG,CAAC;AAAA,cACrC,QAAQ;AAAA,cACR,OAAO;AAAA,YACT;AAAA,YACA,SAAS,MAAM;AACb,sBAAQ,CAAC,UAAU,CAAC,KAAK;AAAA,YAC3B;AAAA,YAEC,iBAAO,oBAAC,YAAU,GAAG,mBAAmB,IAAK,oBAAC,OAAK,GAAG,mBAAmB;AAAA;AAAA,QAC5E;AAAA,SACF,IAEA,oBAAC,SAAO,GAAG,YAAY,gBAAe,QAAO;AAAA;AAAA,EAEjD;AAEJ;",
  "names": []
}
